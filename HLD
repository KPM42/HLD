
struct SegementTree {  //  просто до
    ll val;
    ll l, r;
    SegementTree *left, *right;
    
    SegementTree(ll val, ll l, ll r) {
        this->val = val;
        this->l = l;
        this->r = r;
        left = nullptr;
        right = nullptr;
    }
    SegementTree() {
    }
};

void build(SegementTree *&root, ll l, ll r, vector<ll> &arr) {
    if (l == r) {
        root = new SegementTree(arr[l], l, r);
        return;
    }
    ll m = (l + r) / 2;
    root = new SegementTree(0, l, r);
    build(root->left, l, m, arr);
    build(root->right, m + 1, r, arr);
    root->val = max(root->left->val, root->right->val);
}

ll query(SegementTree *&root, ll l, ll r) {
    if (root->l > r || root->r < l) {
        return -inf;
    }
    if (root->l >= l && root->r <= r) {
        return root->val;
    }
    ll m1 = query(root->left, l, r);
    ll m2 = query(root->right, l, r);
    return max(m1, m2);
}

void change(SegementTree *&root, ll pos, ll newval) {
    if (root->l == root->r) {
        root->val += newval;
        return;
    }
    if (pos > root->left->r)
        change(root->right, pos, newval);
    else
        change(root->left, pos, newval);
    root->val = max(root->left->val, root->right->val);
}

struct HeavyLight {
    ll val = 0; // значение вершины
    ll w; // вес вершины - сумма значений поддерева
    ll bottom; // нижняя вершина тяжелого пути на котором лежит текущая вершина
    ll glub; // глубина
    ll father; // отец пути(его верхней вершины)
    vector<ll> path; // тяжелый путь
    vector<ll> EdgeTo; // ребра из вершины
    SegementTree *ST; // до на тяжелом пути
};

ll l = 1;
vec<vec<ll>> up;
vec<ll> tin, tout;
ll timer = 0;
void dfs(ll v, vector<HeavyLight>& g, ll h, ll p = 0) {
    timer++;
    tin[v] = timer;
    g[v].glub = h;
    g[v].bottom = v;
    g[v].w = 1;
    g[v].father = p;
    up[v][0] = p;
    ll max_weight = -1e9, max_vert = -5;//самая тяжелая - в какую вершину ведет
    for (int i = 1; i <= l; i++)// для lca
        up[v][i] = up[up[v][i - 1]][i - 1];
    for (int i = 0; i < g[v].EdgeTo.size(); i++) {
        ll to = g[v].EdgeTo[i];
        if (to == p)
            continue;
        dfs(to, g, h + 1, v);
        if (max_weight < g[to].w) {
            max_vert = to;
            max_weight = g[to].w;
        }
        g[v].w += g[to].w;
    }
    
    ll to = max_vert;
    if (to != -5 && 2 * g[to].w >= g[v].w) {// если получили тяжелое реберо
        g[v].bottom = g[to].bottom;
        ll bot = g[v].bottom;
        g[bot].father = p;
        g[bot].path.push_back(g[v].val);
    }
    
    if (g[v].bottom == v)
        g[v].path.push_back(g[v].val);
    
    timer++;
    tout[v] = timer;
}

bool upper(ll a, ll b) {
    return tin[a] <= tin[b] && tout[a] >= tout[b];
}

ll lca(ll a, ll b) {// просто lca
    if (upper(a, b))
        return a;
    if (upper(b, a))
        return b;
    for (int i = l; i >= 0; i--) {
        if (!upper(up[a][i], b))
            a = up[a][i];
    }
    return up[a][0];
}

ll GetPos(int v, vector<HeavyLight> &g) {// получение позиции в до и path
    ll bot = g[v].bottom;
    return g[bot].glub - g[v].glub;
}

ll HldQuery(ll a, ll b, vector<HeavyLight> &g) {
    // а - верхняя,  b- нижняя
    if (g[a].bottom == g[b].bottom)// Если они на однои пути
        return query(g[g[a].bottom].ST, GetPos(b, g), GetPos(a, g));
    
    ll bot = g[b].bottom;
    ll ans1 = query(g[bot].ST, GetPos(b, g), g[bot].path.size() - 1);// поднимаемся по пути в котором b, попадаем в отца пути
    ll ans2 = HldQuery(a, g[bot].father, g);// из отца считаем запрос до а
    return max(ans1, ans2);
}

int main()
{
    
#ifdef DEBUG
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#endif

    ll n;
    cin >> n;
    
    vector<HeavyLight> g(n);
    for (int i = 0; i < n - 1; i++) {
        ll a, b;
        cin >> a >> b;
        a--;
        b--;
        g[a].EdgeTo.push_back(b);
        g[b].EdgeTo.push_back(a);
    }
    
    g[0].father = 0;
    while (1 << ll(l) <= n)
        l++;
    up.resize(n, vec<ll>(l + 1));
    tin.resize(n);
    tout.resize(n);
    dfs(0, g, 0);
    
    for (int v = 0; v < n; v++) {// строим до на путях
        if (g[v].bottom == v) {
            g[v].ST = nullptr;
            build(g[v].ST, 0, g[v].path.size() - 1, g[v].path);
        }
    }
}
